# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build

on: [push, pull_request]

jobs:
  build:

    env:
      CUDA: 10.1.105-1
      CUDA_SHORT: 10.1
      UBUNTU_VERSION: ubuntu1804
      FORCE_CUDA: 1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7]
        torch: [1.3.1, 1.5.0]
        include:
          - torch: 1.3.1
            torchvision: 0.4.2
            cuda_arch: 6.0
          - torch: 1.5.0
            torchvision: 0.6.0
            cuda_arch: 7.0

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: install cuda
      env:
        INSTALLER: cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb
        CUDA_HOME: /usr/local/cuda-${CUDA_SHORT}
        LD_LIBRARY_PATH: ${CUDA_HOME}/lib64:${CUDA_HOME}/include:${LD_LIBRARY_PATH}
        PATH: ${CUDA_HOME}/bin:${PATH}
      run: |
        wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
        sudo dpkg -i ${INSTALLER}
        wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
        sudo apt-key add 7fa2af80.pub
        sudo apt update -qq
        sudo apt install -y cuda-${CUDA_SHORT/./-} cuda-cufft-dev-${CUDA_SHORT/./-}
        sudo apt clean
        sudo apt-get install -y ninja-build
    - name: Install PyTorch
      run: |
        pip install Pillow==6.2.2  # remove this line when torchvision>=0.5
        pip install torch==${torch} torchvision==${torchvision}
        pip install mmcv-nightly
        pip install -r requirements.txt
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 isort yapf
    - name: Lint with flake8
      run: flake8 --max-complexity 20 .
    - name: Lint with isort
      run: isort -rc --check-only --diff mmseg/ toosl/ tests/
    - name: Format with yapf
      run: yapf -r -d mmseg/ tools/ configs/ tests/
    - name: Install unittest dependencies
    - name: Build and install
      run: |
        rm -rf .eggs
        python setup.py check -m -s
        TORCH_CUDA_ARCH_LIST="${CUDA_ARCH}" python setup.py build_ext --inplace

    - name: Run unittests and generate coverage report
      run: |
        coverage run --branch --source mmseg -m pytest tests/
        coverage xml
        coverage report -m --omit="mmseg/utils/*","mmseg/ops/*","mmseg/apis/*","mmseg/datasets/samplers/*"
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@master
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false
